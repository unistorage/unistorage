{"google":"","tagline":"Universal storage platform","body":"# unistorage.ru \r\n## История возникновения\r\nИзначально платформа разрабатывалась для нужд проектов холдинга 66.ru, но со временем мы поняли, что получающийся продукт достоен того, чтобы показать его за пределами нашей группы разработчиков. Мы уверены, что платформа найдет применение в самых разных проектах.\r\n\r\n## Работа с файлами\r\nДля того, чтобы загрузить файл, надо послать multipart/form-data POST-запрос, содержащий файл в поле `file`, по адресу `http://<api-url>/`.  \r\nТакже в поле `type_id` можно указать идентификатор типа контента (строку длиной не более 32 символов).  \r\nНапример: `curl --form file=@<path-to-file> --header \"Token: 01234567890123456789012345678901\" localhost:5000`.  \r\nОтветом при успешной загрузке будет JSON `{id: id, 'status': 'ok', resource_uri: ...}`.\r\n\r\nДля того, чтобы выполнить операцию над файлом, надо сделать GET-запрос к `http://<api-url>/id/`, указав имя операции и её параметры.\r\nРезультатом успешного запроса будет JSON `{id: id, status: 'ok', resource_uri: ...}`. Это означает, что операция поставлена в очередь и будет выполнена в ближайшем будущем, а её результат будет доступен в файле с идентификатором id.\r\n\r\nДанные о файле можно получить с помощью GET-запроса к `http://<api-url>/<id/>`.\r\nЕсли файл был загружен пользователем или является результатом успешно выполненной операции над другим файлом -- ответ будет иметь содержать информацию о файле:\r\n\r\n```\r\n{\r\n  status: 'ok',\r\n  information: { fileinfo: {height: 480, width: 640},\r\n                 mimetype: 'image/jpeg',\r\n                 name: 'some.jpeg',\r\n                 size: 211258,\r\n                 uri: 'http://127.0.0.1/503dd7c48149954c99f41a29' },\r\n  ttl: 604800\r\n}\r\n```\r\n`information.uri` -- адрес, по которому доступен файл; `ttl` -- время в секундах, в течении которого актуален данный ответ.\r\n\r\nЕсли id -- результат ещё не выполненной операции, ответ будет содержать статус `wait`:\r\n```\r\n{\r\n  status: 'wait',\r\n  ttl: 5\r\n}\r\n```\r\nТакже, если подключен `unistore-nginx-serve`, в случае с ещё не выполненной операцией в ответе может отсутствовать поле `information`:\r\n```\r\n{\r\n  status: 'ok',\r\n  ttl: 5,\r\n  uri: 'http://127.0.0.1/some_path/503dd7c48149954c99f41a29'\r\n}\r\n```\r\n## Операции\r\n### Изображения\r\n#### Convert\r\nФормат запроса: ?action=**convert**&to=**format**  \r\nАргументы:  \r\n* `format`: bmp, gif, jpeg, png, tiff\r\n\r\n#### Resize\r\nФормат запроса: ?action=**resize**&mode=**mode**&w=**w**&h=**h**  \r\nАргументы:  \r\n* `w`: высота\r\n* `h`: ширина\r\n* `mode`: keep, crop, resize\r\n\r\n    ##### keep\r\n    Изображение ресайзится с сохранением пропорций так, чтобы выполнялось одно из условий:\r\n      * высота изображения == w, ширина < h\r\n      * ширина изображения == h, высота < w\r\n\r\n    Можно указывать только одно из измерений.\r\n\r\n    ##### crop\r\n    1. Изображение ресайзится с сохранением пропорций так, чтобы выполнялось одно из условий:\r\n     * высота изображения == w, ширина > h\r\n     * ширина изображения == h, высота > w\r\n    2. Из середины полученного изображения вырезается прямоугольник размером w×h.\r\n\r\n    ##### resize\r\n    Изображение ресайзится до размера на w×h без сохрания пропорций.\r\n\r\n#### Grayscale\r\nФормат запроса: ?action=**grayscale**  \r\nАргументы: отсутствуют\r\n\r\n#### Rotate\r\nФормат запроса: ?action=**rotate**&angle=**angle**  \r\nАргументы:\r\n* `angle`: угол поворота (считается против часовой стрелки), допустимые значения: 90, 180, 270\r\n\r\n* * *\r\n### Видео\r\n#### Convert\r\nФормат запроса: ?action=**convert**&to=**format**&vcodec=**vcodec**&acodec=**acodec**  \r\nАргументы:  \r\n* `to`: ogg, webm, flv, avi, mkv, mov, mp4, mpg\r\n* `vcodec`: theora, h264, vp8, divx, h263, flv, mpeg1, mpeg2\r\n* `acodec`: vorbis, mp3\r\n\r\nНекоторые контейнеры поддерживают не все кодеки:\r\n<table>\r\n  <tr>\r\n    <th>Контейнер</th> <th>Видеокодеки</th> <th>Аудиокодеки</th>\r\n  </tr>\r\n  <tr>\r\n    <td>ogg</td>\r\n    <td>theora</td>\r\n    <td>vorbis</td>\r\n  </tr>\r\n  <tr>\r\n    <td>webm</td>\r\n    <td>vp8</td>\r\n    <td>vorbis</td>\r\n  </tr>\r\n  <tr>\r\n    <td>flv</td>\r\n    <td>h264, flv</td>\r\n    <td>vorbis, mp3</td>\r\n  </tr>\r\n  <tr>\r\n    <td>mp4</td>\r\n    <td>h264, divx, mpeg1, mpeg2</td>\r\n    <td>vorbis, mp3</td>\r\n  </tr>\r\n</table>\r\nКонвертировать в ogg и webm можно использовать без указания кодеков:\r\n`?action=convert&to=(ogg|webm)`\r\n* * *\r\n\r\n### Изображения и видео\r\n\r\n#### Watermark\r\nФормат запроса: ?action=**watermark**&watermark_id=**watermark_id**&w=**w**&h=**h**&h_pad=**h_pad**&v_pad=**v_pad**&corner=**corner**  \r\nАргументы:  \r\n* `watermark_id`: идентификатор ватермарка в unistore\r\n* `w`, `h`: ширина и высота прямоугольника, в который будет вписан ватермарк перед наложением\r\n* `w_pad`, `h_pad`: горизонтальный и вертикальный отступы\r\n* `corner`: угол, в который будет помещён ватермарк: `ne`, `se`, `sw`, `nw`\r\n\r\nЗначения `w`, `h`, `w_pad`, `h_pad` могут быть указаны как в процентах от картинки, на которую накладывается ватермарк, так и в пикселях. `w=25`, например, считается процентами, а `w=25px` -- пикселями.\r\n\r\n* * *\r\n\r\n### Документы\r\nФормат запроса: ?action=**convert**&to=**format**  \r\n* `to`: doc, docx, odt, pdf, rtf, txt, html\r\n\r\n## Шаблоны\r\nШаблон -- упорядоченный набор совместимых операций и их аргументов. Под совместимостью подразумевается возможность каждую последующую операцию применить к результату предыдущей.  \r\nСервис предоставляет возможность создавать шаблоны, после чего применять их к файлам из хранилища.\r\nШаблон можно создать form-urlencoded POST-запросом к `/create_template`. Корректный запрос возвращает идентификатор созданного шаблона и должен содержать следующие поля:\r\n* `applicable_for` -- семейство типов, к которым применим шаблон. Допустимые значения: `image`, `video`, `doc`\r\n* `action[]` -- список операций и их аргументов, заданных GET-строками.\r\n\r\nПример запроса для создания шаблона, который вначале отресайзит картинку, после чего сделает её черно-белой:\r\n```\r\napplicable_for: image\r\naction[]: action=resize&mode=keep&w=50&h=50\r\naction[]: action=grayscale\r\n```\r\n\r\nGET-запрос к `/<file_id/?template=<template_id>` ставит в очередь применение шаблона `template_id` к файлу `file_id` и возвращает JSON вида `{id: id, status: 'ok'}`, где `id` -- идентификатор результирующего файла.\r\n\r\n## Создание zip-архивов\r\nДля того, чтобы создать zip-архив, надо послать form-urlencoded POST-запрос к `/zip/`. Корректный запрос возвращает JSON вида `{id: id, status: 'ok', resource_uri: ...}` и должен содержать следующие поля:\r\n\r\n* `file_id[]` -- список идентификаторов архивируемых файлов\r\n* `filename` -- имя архива\r\n\r\nИнформация об архивах доступна по адресу `/zip/<id>/` и имеет следующий вид:\r\n```\r\n{\r\n  status: 'ok',\r\n  ttl: 604800,\r\n  uri: 'http://127.0.0.1/some_path/503dd7c48149954c99f41a29'\r\n}\r\n```\r\nАрхивы перестают быть доступными по истечении своего `ttl`.","name":"Unistorage.ru","note":"Don't delete this file! It's used internally to help with page regeneration."}